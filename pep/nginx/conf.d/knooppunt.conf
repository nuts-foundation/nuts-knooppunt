# Knooppunt Policy Enforcement Point Configuration

# Import JavaScript module for authorization
js_import authorize from /etc/nginx/js/authorize.js;

# Upstream for FHIR backend
upstream fhir_backend {
    server ${FHIR_BACKEND_HOST}:${FHIR_BACKEND_PORT};
    keepalive 32;
}

# Upstream for Knooppunt PDP
upstream knooppunt_pdp {
    server ${KNOOPPUNT_PDP_HOST}:${KNOOPPUNT_PDP_PORT};
    keepalive 32;
}

server {
    listen 8080 default_server;
    server_name _;

    # Rate limiting
    limit_req zone=pep_limit burst=20 nodelay;
    limit_req_status 429;

    # Custom log format with authorization details
    access_log /var/log/nginx/pep-access.log authz;
    error_log /var/log/nginx/pep-error.log warn;

    # Health check endpoint
    location = /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "healthy\n";
    }

    # FHIR API routes - protected by authorization
    location /fhir/ {
        # Call authorization subrequest before proxying
        auth_request /_authorize;

        # Error handling for authorization failures
        error_page 401 = @error401;
        error_page 403 = @error403;
        error_page 500 502 503 504 = @error5xx;

        # Forward to FHIR backend if authorized
        proxy_pass http://fhir_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        # Remove sensitive headers before forwarding
        proxy_set_header Authorization "";

        # Timeouts for FHIR operations
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Internal authorization endpoint
    location = /_authorize {
        internal;
        js_content authorize.checkAuthorization;
    }

    # Internal token introspection endpoint
    # For testing: calls mockIntrospect() JavaScript function
    # For production: replace with proxy_pass to real OAuth server
    location = /_introspect {
        internal;
        js_content authorize.mockIntrospect;
    }

    # Internal endpoint to call Knooppunt PDP (OPA-compliant endpoint)
    # OPA standard: POST /v1/data/{package}/{rule}
    location = /_pdp {
        internal;
        proxy_pass http://knooppunt_pdp/pdp/v1/data/knooppunt/authz;
        proxy_method POST;
        proxy_set_header Content-Type "application/json";
        proxy_pass_request_body on;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # Error pages
    location @error401 {
        add_header Content-Type application/json;
        return 401 '{"error": "Unauthorized", "message": "Missing or invalid authentication"}';
    }

    location @error403 {
        add_header Content-Type application/json;
        return 403 '{"error": "Forbidden", "message": "Access denied by authorization policy"}';
    }

    location @error5xx {
        add_header Content-Type application/json;
        return 500 '{"error": "Internal Server Error", "message": "Authorization service unavailable"}';
    }
}
