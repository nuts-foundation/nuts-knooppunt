// Code generated by MockGen. DO NOT EDIT.
// Source: component.go
//
// Generated by this command:
//
//	mockgen -destination=component_mock.go -package=pseudonimization -source=component.go
//

// Package pseudonimization is a generated GoMock package.
package pseudonimization

import (
	reflect "reflect"

	fhir "github.com/zorgbijjou/golang-fhir-models/fhir-models/fhir"
	gomock "go.uber.org/mock/gomock"
)

// MockPseudonymizer is a mock of Pseudonymizer interface.
type MockPseudonymizer struct {
	ctrl     *gomock.Controller
	recorder *MockPseudonymizerMockRecorder
	isgomock struct{}
}

// MockPseudonymizerMockRecorder is the mock recorder for MockPseudonymizer.
type MockPseudonymizerMockRecorder struct {
	mock *MockPseudonymizer
}

// NewMockPseudonymizer creates a new mock instance.
func NewMockPseudonymizer(ctrl *gomock.Controller) *MockPseudonymizer {
	mock := &MockPseudonymizer{ctrl: ctrl}
	mock.recorder = &MockPseudonymizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPseudonymizer) EXPECT() *MockPseudonymizerMockRecorder {
	return m.recorder
}

// IdentifierToToken mocks base method.
func (m *MockPseudonymizer) IdentifierToToken(identifier fhir.Identifier, audience string) (*fhir.Identifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentifierToToken", identifier, audience)
	ret0, _ := ret[0].(*fhir.Identifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdentifierToToken indicates an expected call of IdentifierToToken.
func (mr *MockPseudonymizerMockRecorder) IdentifierToToken(identifier, audience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentifierToToken", reflect.TypeOf((*MockPseudonymizer)(nil).IdentifierToToken), identifier, audience)
}

// TokenToBSN mocks base method.
func (m *MockPseudonymizer) TokenToBSN(identifier fhir.Identifier, audience string) (*fhir.Identifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenToBSN", identifier, audience)
	ret0, _ := ret[0].(*fhir.Identifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenToBSN indicates an expected call of TokenToBSN.
func (mr *MockPseudonymizerMockRecorder) TokenToBSN(identifier, audience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenToBSN", reflect.TypeOf((*MockPseudonymizer)(nil).TokenToBSN), identifier, audience)
}
