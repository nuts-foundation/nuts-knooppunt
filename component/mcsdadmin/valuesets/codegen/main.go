package main

import (
	"embed"
	"os"
	"strings"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

//go:embed *.json
var setsFS embed.FS

func main() {
	dirEntries, err := setsFS.ReadDir(".")
	if err != nil {
		panic(err)
	}

	output := `// Code generated by component/mcsdadmin/valuesets/codegen/main.go; DO NOT EDIT.

package valuesets

import "github.com/zorgbijjou/golang-fhir-models/fhir-models/fhir"

`
	type item struct {
		name     string
		typeName string
	}
	var items []item
	for _, entry := range dirEntries {
		if entry.IsDir() {
			continue
		}
		// convert file name; endpoint-connection-type.json -> EndpointConnectionType
		constName := strings.TrimSuffix(entry.Name(), ".json")
		parts := strings.Split(constName, "-")
		for i, part := range parts {
			parts[i] = cases.Title(language.English).String(part)
		}
		constName = strings.Join(parts, "")
		items = append(items, item{
			name:     constName,
			typeName: entry.Name(),
		})
		output += "var " + constName + "Codings []fhir.Coding\n"
	}
	output += "\nfunc init() {\n"
	for _, item := range items {
		output += "\t" + item.name + "Codings = getValueSets()[\"" + strings.TrimSuffix(item.typeName, ".json") + "\"]\n"
		output += "\tif " + item.name + "Codings == nil {\n"
		output += "\t\tpanic(\"Value set " + item.typeName + " not found\")\n"
		output += "\t}\n"
	}
	output += "}\n"

	err = os.WriteFile("constants.gen.go", []byte(output), 0644)
	if err != nil {
		panic(err)
	}
}
