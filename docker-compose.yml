services:
  knooppunt:
    build: .
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      KNPT_MCSDADMIN_FHIRBASEURL: http://hapi-fhir:7050/fhir/knpt-mcsd-admin
      KNPT_MCSD_QUERY_FHIRBASEURL: http://hapi-fhir:7050/fhir/knpt-mcsd-query
      KNPT_MCSD_ADMIN_LRZA_FHIRBASEURL: https://knooppunt-test.nuts-services.nl/lrza/mcsd
      KNPT_NVI_BASEURL: http://hapi-fhir:7050/fhir/nvi
    volumes:
      - ./config:/app/config:ro
  init:
    image: golang:1.24.4-alpine
    depends_on:
      hapi-fhir-healthcheck:
        condition: service_completed_successfully
    volumes:
      - ./test/testdata:/app/:ro
    command: /bin/sh -c "cd /app && go run main.go http://knooppunt:8081 http://hapi-fhir:7050/fhir"

  # PostgreSQL Database
  #  postgres:
  #    image: postgres:14
  #    container_name: hapi-postgres
  #    environment:
  #      POSTGRES_DB: hapi
  #      POSTGRES_USER: admin
  #      POSTGRES_PASSWORD: admin
  #    ports:
  #      - "5432:5432"
  #    volumes:
  #      - postgres-data:/var/lib/postgresql/data
  #    healthcheck:
  #      test: ["CMD-SHELL", "pg_isready -U admin -d hapi"]
  #      interval: 10s
  #      timeout: 5s
  #      retries: 5
  #      start_period: 10s
  #    restart: unless-stopped

  # HAPI FHIR Server
  hapi-fhir:
    image: ghcr.io/nuts-foundation/fake-nvi:latest # which is hapi:v8.2.0-2 with our NVI specifics
    container_name: hapi-fhir-server
    ports:
      - "7050:7050"
    #    depends_on:
    #      postgres:
    #        condition: service_healthy
    environment:
      # For a full list of options, see https://github.com/nuts-foundation/nuts-knooppunt/blob/8463b719caca0a3dd8623a36188a4e1423faa8bb/config/hapi.application.dev.yml
      #
      # Properties that should be enabled when deploying to test/production/etc
      #
      #      spring.datasource.url: jdbc:postgresql://postgres:5432/hapi
      #      spring.datasource.username: admin
      #      spring.datasource.password: admin
      #      spring.datasource.driverClassName: org.postgresql.Driver
      #      spring.jpa.properties.hibernate.dialect: "ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgresDialect"
      hapi.fhir.server_address: http://localhost:7050/fhir
      hapi.fhir.version: R4
      # Prevents encoding of the pipe char in queries
      server.tomcat.relaxed-query-chars: "|"
      server.port: 7050
      # should be an ADR? How does this behave?
      hapi.fhir.allow_cascading_deletes: true
      # Lets the server generate UUIDs for resources instead of integers
      hapi.fhir.server_id_strategy: UUID
      # Allow storing of meta.source as provided by the client (used by mCSD to reference the originating resource)
      hapi.fhir.store_meta_source_information: SOURCE_URI

      #
      # Local development properties (not to be used when deploying to test/production)
      #
      # Allows clients to set UUID on resources, is this needed?
      hapi.fhir.client_id_strategy: ANY
      # Allows for expung operations, handy during development
      hapi.fhir.delete_expunge_enabled: true
      hapi.fhir.allow_multiple_delete: true # to allow $expunge on system-level
      # Adds some default configs to the HAPI web UI for development
      hapi.fhir.tester.local.name: Local Directory
      hapi.fhir.tester.local.server_address: http://localhost:7050/fhir/DEFAULT
      hapi.fhir.tester.local.refuse_to_fetch_third_party_urls: false
      hapi.fhir.tester.local.fhir_version: R4

      hapi.fhir.tester.lrza.name: LRZA
      hapi.fhir.tester.lrza.server_address: http://localhost:7050/fhir/LRZA
      hapi.fhir.tester.lrza.refuse_to_fetch_third_party_urls: false
      hapi.fhir.tester.lrza.fhir_version: R4

      hapi.fhir.tester.orga.name: Org A Directory
      hapi.fhir.tester.orga.server_address: http://localhost:7050/fhir/OrgA
      hapi.fhir.tester.orga.refuse_to_fetch_third_party_urls: false
      hapi.fhir.tester.orga.fhir_version: R4

      # Enable partitioning and allow string tenant identifiers
      hapi.fhir.partitioning.allow_references_across_partitions: false
    restart: unless-stopped
  hapi-fhir-healthcheck:
    image: curlimages/curl:7.87.0
    depends_on:
      - hapi-fhir
    entrypoint:
      [
        "sh",
        "-c",
        "echo 'Starting fhirstore healthcheck...'; while ! curl -s -f http://hapi-fhir:7050/fhir/DEFAULT/Task > /dev/null; do echo 'Waiting for HAPI FHIR to be ready...'; sleep 5; done; echo 'HAPI FHIR is up and running.'",
      ]
    # Ensure the container exits successfully after the check
    restart: "no"

volumes:
  #postgres-data:
  hapi-data:
